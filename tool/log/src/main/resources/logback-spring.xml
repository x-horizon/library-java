<?xml version="1.0" encoding="UTF-8"?>
<configuration scan="true" scanPeriod="60 seconds" debug="false">

    <contextName>logback</contextName>

    <conversionRule conversionWord="logColorConfig"
                    class="org.horizon.sdk.library.java.tool.log.config.LogColorConfig"/>

    <!--  支持自定义配置的选项，可在 spring 配置文件中配置  -->
    <!--  按本日志配置文件生效输出日志的包路径，必须配置，如：cn.xxx.xxx  -->
    <springProperty scope="context" name="logPackage" source="library.java.tool.log.package"/>
    <!--  日志文件的存放路径，可选配置，默认：项目根路径/log/  -->
    <springProperty scope="context" name="logPath" source="library.java.tool.log.path" defaultValue="${user.dir}/log"/>
    <!--  日志输出格式  -->
    <!--
          1、 %logger{x}
              表示全限定类名信息；
              x 为 0，仅输出类名；
              x 大于 0，尝试输出全路径，并按照指定的 x 值进行缩写；
              例如 com.test.sample.Main：
              设置 %logger{0} ：Main
              设置 %logger{5} ：缩写为 c.t.s.Main
              设置 %logger{20}：com.test.sample.Main
          2、 %date / %d
              表示日期信息；
              默认格式为 yyyy-MM-dd HH:mm:ss,SSS；
              可通过 %date{x} 自定义格式，例如：%date{yyyy-MM-dd HH:mm:ss.SSS}
          3、 %level / %le / %p
              表示输出日志的 level；
          4、 %line / %L
              表示输出相对应的行号；
          5、 %message / %msg / %m
              表示实输出的日志内容；
          6、 %replace(p){r,t}
              表示对 p 中给定的内容进行字符串替换，将 r 替换为 t，支持正则；
              例如可将 p 中的换行替换为下划线，防止日志攻击；
          7、 %method / %M
              表示方法名称；
          8、 %thread / %t
              表示线程名称；
          9、 %ex{x}
              用于指定错误异常堆栈的打印策略；
              x 可以为 short / full /具体数字，表示打印多少行堆栈；
          10、%n
              表示换行；
          11、
              字符串对齐、截取、格式化说明：
              在上述的各个占位符中，在 % 和具体字符之间，可以插入格式化指令，以 %c 为例，如下：
              %20(%c)      ：若 %c 的内容不足 20 位，则在左侧以空格填充满 20 长度；
              %-20(%c)     ：若 %c 的内容不足 20 位，则在右侧以空格填充满 20 长度；
              %.20(%c)     ：若 %c 的内容超过 20 位，则截取掉左侧的内容，只留下 20 位长度；
              %.-20(%c)    ：若 %c 的内容超过 20 位，则截取掉右侧的内容，只留下 20 位长度；
              %20.30(%c)   ：表示最短 20 位，最长 30 位，若 %c 的内容不足 20 位，则在左侧以空格填充满 20 长度，若 %c 的内容超过 30 位，则截取掉左侧的内容，只留下 30 位长度；
              %20.-30(%c)  ：表示最短 20 位，最长 30 位，若 %c 的内容不足 20 位，则在左侧以空格填充满 20 长度，若 %c 的内容超过 30 位，则截取掉右侧的内容，只留下 30 位长度；
              %-20.30(%c)  ：表示最短 20 位，最长 30 位，若 %c 的内容不足 20 位，则在右侧以空格填充满 20 长度，若 %c 的内容超过 30 位，则截取掉左侧的内容，只留下 30 位长度；
              %-20.-30(%c) ：表示最短 20 位，最长 30 位，若 %c 的内容不足 20 位，则在右侧以空格填充满 20 长度，若 %c 的内容超过 30 位，则截取掉右侧的内容，只留下 30 位长度；
    -->
    <springProperty scope="context" name="logPattern" source="library.java.tool.log.pattern"
                    defaultValue="%date{yyyy-MM-dd HH:mm:ss.SSS} %-5level - %-50.50(%logger{50}) - [%thread]: %message%n"/>
    <!--  日志字符集，可选配置，默认：UTF-8  -->
    <springProperty scope="context" name="logCharset" source="library.java.tool.log.charset" defaultValue="UTF-8"/>
    <!--  记录 TRACE 级别的日志文件名，可选配置，默认：trace.log  -->
    <springProperty scope="context" name="logTraceFileName" source="library.java.tool.log.file-name.trace"
                    defaultValue="trace.log"/>
    <!--  记录 DEBUG 级别的日志文件名，可选配置，默认：debug.log  -->
    <springProperty scope="context" name="logDebugFileName" source="library.java.tool.log.file-name.debug"
                    defaultValue="debug.log"/>
    <!--  记录 INFO 级别的日志文件名，可选配置，默认：info.log  -->
    <springProperty scope="context" name="logInfoFileName" source="library.java.tool.log.file-name.info"
                    defaultValue="info.log"/>
    <!--  记录 WARN 级别的日志文件名，可选配置，默认：warn.log  -->
    <springProperty scope="context" name="logWarnFileName" source="library.java.tool.log.file-name.warn"
                    defaultValue="warn.log"/>
    <!--  记录 ERROR 级别的日志文件名，可选配置，默认：error.log  -->
    <springProperty scope="context" name="logErrorFileName" source="library.java.tool.log.file-name.error"
                    defaultValue="error.log"/>
    <!--  记录所有级别的日志文件名，可选配置，默认：all.log  -->
    <springProperty scope="context" name="logAllLogFileName" source="library.java.tool.log.file-name.all"
                    defaultValue="all.log"/>
    <!--  日志轮动配置：当日志文件达到指定的大小时，轮动一次，可选配置，默认：30MB  -->
    <springProperty scope="context" name="logRollingMaxFileSize" source="library.java.tool.log.rolling.max-file-size"
                    defaultValue="30MB"/>
    <!--  日志轮动配置：日志文件保留的时间，超过该时间的日志将被物理删除，单位：天，可选配置，默认：30 天  -->
    <springProperty scope="context" name="logRollingMaxHistoryDay"
                    source="library.java.tool.log.rolling.max-history-day" defaultValue="30"/>
    <!--  日志轮动配置：限制所有日志文件的总大小上限。当超过总大小上限时，将异步删除旧的日志文件  -->
    <springProperty scope="context" name="logRollingMaxTotalSize" source="library.java.tool.log.rolling.max-total-size"
                    defaultValue="100GB"/>
    <!--  日志轮动配置：轮动日志的存放路径，可选配置，默认：项目根路径/log/年/月/日/  -->
    <springProperty scope="context" name="logRollingFolderPath" source="library.java.tool.log.rolling.folder-path"
                    defaultValue="%d{yyyy,aux}/%d{MM,aux}/%d{dd,aux}"/>
    <!--  日志轮动配置：记录 TRACE 级别的轮动日志文件名，可选配置，默认：trace-yyyy-MM-dd.轮动次数.log，按天记录，若需要其他级别记录，例如按小时记录，可设置为：trace-%d{yyyy-MM-dd;HH}.%i.log  -->
    <springProperty scope="context" name="logRollingTraceFileNamePattern"
                    source="library.java.tool.log.rolling.file-name-pattern.trace"
                    defaultValue="trace-%d{yyyy-MM-dd}.%i.log"/>
    <!--  日志轮动配置：记录 DEBUG 级别的轮动日志文件名，可选配置，默认：debug-yyyy-MM-dd.轮动次数.log，按天记录，若需要其他级别记录，例如按小时记录，可设置为：debug-%d{yyyy-MM-dd;HH}.%i.log  -->
    <springProperty scope="context" name="logRollingDebugFileNamePattern"
                    source="library.java.tool.log.rolling.file-name-pattern.debug"
                    defaultValue="debug-%d{yyyy-MM-dd}.%i.log"/>
    <!--  日志轮动配置：记录 INFO 级别的轮动日志文件名，可选配置，默认：info-yyyy-MM-dd.轮动次数.log，按天记录，若需要其他级别记录，例如按小时记录，可设置为：info-%d{yyyy-MM-dd;HH}.%i.log  -->
    <springProperty scope="context" name="logRollingInfoFileNamePattern"
                    source="library.java.tool.log.rolling.file-name-pattern.info"
                    defaultValue="info-%d{yyyy-MM-dd}.%i.log"/>
    <!--  日志轮动配置：记录 WARN 级别的轮动日志文件名，可选配置，默认：warn-yyyy-MM-dd.轮动次数.log，按天记录，若需要其他级别记录，例如按小时记录，可设置为：warn-%d{yyyy-MM-dd;HH}.%i.log  -->
    <springProperty scope="context" name="logRollingWarnFileNamePattern"
                    source="library.java.tool.log.rolling.file-name-pattern.warn"
                    defaultValue="warn-%d{yyyy-MM-dd}.%i.log"/>
    <!--  日志轮动配置：记录 ERROR 级别的轮动日志文件名，可选配置，默认：error-yyyy-MM-dd.轮动次数.log，按天记录，若需要其他级别记录，例如按小时记录，可设置为：error-%d{yyyy-MM-dd;HH}.%i.log  -->
    <springProperty scope="context" name="logRollingErrorFileNamePattern"
                    source="library.java.tool.log.rolling.file-name-pattern.error"
                    defaultValue="error-%d{yyyy-MM-dd}.%i.log"/>
    <!--  日志轮动配置：记录所有级别的轮动日志文件名，可选配置，默认：all-yyyy-MM-dd.轮动次数.log，按天记录，若需要其他级别记录，例如按小时记录，可设置为：all-%d{yyyy-MM-dd;HH}.%i.log  -->
    <springProperty scope="context" name="logRollingAllLogFileNamePattern"
                    source="library.java.tool.log.rolling.file-name-pattern.all"
                    defaultValue="all-%d{yyyy-MM-dd}.%i.log"/>

    <appender name="CONSOLE" class="ch.qos.logback.core.ConsoleAppender">
        <filter class="ch.qos.logback.classic.filter.ThresholdFilter">
            <level>trace</level>
        </filter>
        <encoder>
            <pattern>${logPattern}</pattern>
            <charset>${logCharset}</charset>
        </encoder>
    </appender>

    <appender name="TRACE_FILE" class="ch.qos.logback.core.rolling.RollingFileAppender">
        <file>${logPath}/${logTraceFileName}</file>
        <append>true</append>
        <encoder>
            <pattern>${logPattern}</pattern>
            <charset>${logCharset}</charset>
        </encoder>
        <filter class="ch.qos.logback.classic.filter.LevelFilter">
            <level>trace</level>
            <onMatch>ACCEPT</onMatch>
            <onMismatch>DENY</onMismatch>
        </filter>
        <rollingPolicy class="ch.qos.logback.core.rolling.SizeAndTimeBasedRollingPolicy">
            <fileNamePattern>${logPath}/${logRollingFolderPath}/${logRollingTraceFileNamePattern}</fileNamePattern>
            <maxFileSize>${logRollingMaxFileSize}</maxFileSize>
            <maxHistory>${logRollingMaxHistoryDay}</maxHistory>
            <totalSizeCap>${logRollingMaxTotalSize}</totalSizeCap>
        </rollingPolicy>
    </appender>

    <appender name="DEBUG_FILE" class="ch.qos.logback.core.rolling.RollingFileAppender">
        <file>${logPath}/${logDebugFileName}</file>
        <append>true</append>
        <encoder>
            <pattern>${logPattern}</pattern>
            <charset>${logCharset}</charset>
        </encoder>
        <filter class="ch.qos.logback.classic.filter.LevelFilter">
            <level>debug</level>
            <onMatch>ACCEPT</onMatch>
            <onMismatch>DENY</onMismatch>
        </filter>
        <rollingPolicy class="ch.qos.logback.core.rolling.SizeAndTimeBasedRollingPolicy">
            <fileNamePattern>${logPath}/${logRollingFolderPath}/${logRollingDebugFileNamePattern}</fileNamePattern>
            <maxFileSize>${logRollingMaxFileSize}</maxFileSize>
            <maxHistory>${logRollingMaxHistoryDay}</maxHistory>
            <totalSizeCap>${logRollingMaxTotalSize}</totalSizeCap>
        </rollingPolicy>
    </appender>

    <appender name="INFO_FILE" class="ch.qos.logback.core.rolling.RollingFileAppender">
        <file>${logPath}/${logInfoFileName}</file>
        <append>true</append>
        <encoder>
            <pattern>${logPattern}</pattern>
            <charset>${logCharset}</charset>
        </encoder>
        <filter class="ch.qos.logback.classic.filter.LevelFilter">
            <level>info</level>
            <onMatch>ACCEPT</onMatch>
            <onMismatch>DENY</onMismatch>
        </filter>
        <rollingPolicy class="ch.qos.logback.core.rolling.SizeAndTimeBasedRollingPolicy">
            <fileNamePattern>${logPath}/${logRollingFolderPath}/${logRollingInfoFileNamePattern}</fileNamePattern>
            <maxFileSize>${logRollingMaxFileSize}</maxFileSize>
            <maxHistory>${logRollingMaxHistoryDay}</maxHistory>
            <totalSizeCap>${logRollingMaxTotalSize}</totalSizeCap>
        </rollingPolicy>
    </appender>

    <appender name="WARN_FILE" class="ch.qos.logback.core.rolling.RollingFileAppender">
        <file>${logPath}/${logWarnFileName}</file>
        <append>true</append>
        <encoder>
            <pattern>${logPattern}</pattern>
            <charset>${logCharset}</charset>
        </encoder>
        <filter class="ch.qos.logback.classic.filter.LevelFilter">
            <level>warn</level>
            <onMatch>ACCEPT</onMatch>
            <onMismatch>DENY</onMismatch>
        </filter>
        <rollingPolicy class="ch.qos.logback.core.rolling.SizeAndTimeBasedRollingPolicy">
            <fileNamePattern>${logPath}/${logRollingFolderPath}/${logRollingWarnFileNamePattern}</fileNamePattern>
            <maxFileSize>${logRollingMaxFileSize}</maxFileSize>
            <maxHistory>${logRollingMaxHistoryDay}</maxHistory>
            <totalSizeCap>${logRollingMaxTotalSize}</totalSizeCap>
        </rollingPolicy>
    </appender>

    <appender name="ERROR_FILE" class="ch.qos.logback.core.rolling.RollingFileAppender">
        <file>${logPath}/${logErrorFileName}</file>
        <append>true</append>
        <encoder>
            <pattern>${logPattern}</pattern>
            <charset>${logCharset}</charset>
        </encoder>
        <filter class="ch.qos.logback.classic.filter.LevelFilter">
            <level>ERROR</level>
            <onMatch>ACCEPT</onMatch>
            <onMismatch>DENY</onMismatch>
        </filter>
        <rollingPolicy class="ch.qos.logback.core.rolling.SizeAndTimeBasedRollingPolicy">
            <fileNamePattern>${logPath}/${logRollingFolderPath}/${logRollingErrorFileNamePattern}</fileNamePattern>
            <maxFileSize>${logRollingMaxFileSize}</maxFileSize>
            <maxHistory>${logRollingMaxHistoryDay}</maxHistory>
            <totalSizeCap>${logRollingMaxTotalSize}</totalSizeCap>
        </rollingPolicy>
    </appender>

    <appender name="ALL_LOG_FILE" class="ch.qos.logback.core.rolling.RollingFileAppender">
        <file>${logPath}/${logAllLogFileName}</file>
        <append>true</append>
        <encoder>
            <pattern>${logPattern}</pattern>
            <charset>${logCharset}</charset>
        </encoder>
        <rollingPolicy class="ch.qos.logback.core.rolling.SizeAndTimeBasedRollingPolicy">
            <fileNamePattern>${logPath}/${logRollingFolderPath}/${logRollingAllLogFileNamePattern}</fileNamePattern>
            <maxFileSize>${logRollingMaxFileSize}</maxFileSize>
            <maxHistory>${logRollingMaxHistoryDay}</maxHistory>
            <totalSizeCap>${logRollingMaxTotalSize}</totalSizeCap>
        </rollingPolicy>
    </appender>


    <!--
          下述配置，分别对应 spring 激活的环境：
            spring:
              profiles:
                active: localhost
                # active: development
                # active: kubernetes

          root 全局节点使用 info 级别输出，若需要输出 debug 信息，需要显式配置，如：
            logging:
              level:
                com.test.sample: debug
    -->
    <springProfile name="environment-localhost">
        <root level="info">
            <appender-ref ref="CONSOLE"/>
            <appender-ref ref="TRACE_FILE"/>
            <appender-ref ref="DEBUG_FILE"/>
            <appender-ref ref="INFO_FILE"/>
            <appender-ref ref="WARN_FILE"/>
            <appender-ref ref="ERROR_FILE"/>
            <appender-ref ref="ALL_LOG_FILE"/>
        </root>
    </springProfile>

    <springProfile name="environment-development">
        <root level="info">
            <appender-ref ref="CONSOLE"/>
            <appender-ref ref="TRACE_FILE"/>
            <appender-ref ref="DEBUG_FILE"/>
            <appender-ref ref="INFO_FILE"/>
            <appender-ref ref="WARN_FILE"/>
            <appender-ref ref="ERROR_FILE"/>
            <appender-ref ref="ALL_LOG_FILE"/>
        </root>
    </springProfile>

    <springProfile name="environment-kubernetes">
        <root level="info">
            <appender-ref ref="CONSOLE"/>
            <appender-ref ref="TRACE_FILE"/>
            <appender-ref ref="DEBUG_FILE"/>
            <appender-ref ref="INFO_FILE"/>
            <appender-ref ref="WARN_FILE"/>
            <appender-ref ref="ERROR_FILE"/>
            <appender-ref ref="ALL_LOG_FILE"/>
        </root>
    </springProfile>

    <springProfile name="environment-production">
        <root level="info">
            <appender-ref ref="CONSOLE"/>
            <appender-ref ref="TRACE_FILE"/>
            <appender-ref ref="DEBUG_FILE"/>
            <appender-ref ref="INFO_FILE"/>
            <appender-ref ref="WARN_FILE"/>
            <appender-ref ref="ERROR_FILE"/>
            <appender-ref ref="ALL_LOG_FILE"/>
        </root>
    </springProfile>

    <!-- TODO wjm localhost 和 development 在后续日志没有问题后，配置不写到文件 -->

    <!-- TODO wjm 配置异步输出 -->

</configuration>