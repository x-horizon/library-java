package ${packageName}.service;

import ${packageName}.bean.convert.${ClassName}Converter;
import ${packageName}.bean.dto.${ClassName}SaveDTO;
import ${packageName}.bean.dto.${ClassName}UpdateDTO;
import ${packageName}.bean.po.${ClassName}PO;
import ${packageName}.bean.query.${ClassName}CollectionQuery;
import ${packageName}.bean.query.${ClassName}PageQuery;
import ${packageName}.bean.query.${ClassName}SingleQuery;
import ${packageName}.dao.${ClassName}Dao;
import org.horizon.sdk.library.java.orm.mybatis.plus.core.GenericCurdService;
import org.horizon.sdk.library.java.orm.mybatis.plus.core.MpWrappers;
import com.baomidou.mybatisplus.core.metadata.IPage;
import com.baomidou.mybatisplus.extension.plugins.pagination.Page;
import org.springframework.stereotype.Service;

import java.util.List;

/**
 * ${tableComment}(${tableName}) service
 *
 * @author TODO 请填写名字
 * @since ${currentTimeAccurateToSecond}
 */
@Service
public class ${ClassName}Service extends GenericCurdService<${ClassName}Dao, ${ClassName}PO> {

    /**
     * 新增单条数据
     *
     * @param ${className}SaveDTO 新增模型
     */
    public void save(${ClassName}SaveDTO ${className}SaveDTO) {
            ${ClassName}PO ${className}PO = ${ClassName}Converter.INSTANCE.toPO(${className}SaveDTO);
        super.save(${className}PO);
    }

    /**
     * 根据主键更新单条数据
     *
     * @param ${className}UpdateDTO 更新模型
     */
    public void updateById(${ClassName}UpdateDTO ${className}UpdateDTO) {
            ${ClassName}PO ${className}PO = ${ClassName}Converter.INSTANCE.toPO(${className}UpdateDTO);
        super.updateById(${className}PO);
    }

    /**
     * 根据主键批量逻辑删除数据
     *
     * @param ids 主键
     */
    public void removeByIds(List<Long> ids) {
        super.removeByIds(ids);
    }

    /**
     * 查询单条数据
     *
     * @param ${className}SingleQuery 查询模型
     * @return 结果集
     */
    public ${ClassName}PO getByCondition(${ClassName}SingleQuery ${className}SingleQuery) {
        return super.getOne(MpWrappers.<${ClassName}PO>withEmptyQuery());
    }

    /**
     * 查询列表数据
     *
     * @param ${className}CollectionQuery 查询模型
     * @return 结果集
     */
    public List<${ClassName}PO> listByCondition(${ClassName}CollectionQuery ${className}CollectionQuery) {
        return super.list(MpWrappers.<${ClassName}PO>withEmptyQuery());
    }

    /**
     * 查询分页列表数据
     *
     * @param ${className}PageQuery 查询模型
     * @return 结果集
     */
    public IPage<${ClassName}PO> pageByCondition(${ClassName}PageQuery ${className}PageQuery) {
        return super.page(new Page<>(${className}PageQuery.getPageIndex(), ${className}PageQuery.getPageSize()),
                MpWrappers.<${ClassName}PO>withEmptyQuery()
        );
    }

}